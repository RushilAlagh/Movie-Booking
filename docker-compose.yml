version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: movie_postgres
    environment:
      POSTGRES_DB: moviedb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: yourpassword
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - movie-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d moviedb"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    container_name: movie_redis
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    networks:
      - movie-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: movie_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq
    networks:
      - movie-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "check_port_connectivity"]
      interval: 15s
      timeout: 20s
      retries: 15
      start_period: 30s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: movie_backend
    environment:
      - DB_HOST=postgres
      - DB_USER=postgres
      - DB_PASSWORD=yourpassword
      - DB_NAME=moviedb
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - PORT=4000
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - movie-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 15s
      timeout: 20s
      retries: 5
      start_period: 60s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: movie_frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=http://localhost:4000
    networks:
      - movie-network
    depends_on:
      backend:
        condition: service_healthy

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: movie_worker
    environment:
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - DB_HOST=postgres
      - DB_USER=postgres
      - DB_PASSWORD=yourpassword
      - DB_NAME=moviedb
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - movie-network

networks:
  movie-network:
    driver: bridge

volumes:
  pgdata:
  redisdata:
  rabbitmqdata: